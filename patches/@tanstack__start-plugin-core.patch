diff --git a/dist/esm/constants.js b/dist/esm/constants.js
index fc3b0562b2670eba8e85c66fc4d01dc91984e9be..4f09e764c1a7f5165928911a40d4a2079cb1b63b 100644
--- a/dist/esm/constants.js
+++ b/dist/esm/constants.js
@@ -5,8 +5,8 @@ const VITE_ENVIRONMENT_NAMES = {
   client: "client"
 };
 const ENTRY_POINTS = {
-  client: "virtual:tanstack-start-client-entry",
-  server: "virtual:tanstack-start-server-request-entry",
+  client: "__tanstack-start-client-entry__",
+  server: "__tanstack-start-server-entry__",
   // the start entry point must always be provided by the user
   start: "#tanstack-start-entry",
   router: "#tanstack-router-entry"
diff --git a/dist/esm/plugin.js b/dist/esm/plugin.js
index bc12572d9bed5c4adf1945da330fbaf56228465b..18d01ea37e896073f09dc28212581836fda0fd51 100644
--- a/dist/esm/plugin.js
+++ b/dist/esm/plugin.js
@@ -87,31 +87,21 @@ function TanStackStartVitePluginCore(corePluginOpts, startPluginOpts) {
           resolvedSrcDirectory,
           required: false
         });
-        let clientAlias;
-        if (clientEntryPath) {
-          clientAlias = vite.normalizePath(
-            path.join("/@fs", path.resolve(root, clientEntryPath))
-          );
-        } else {
-          clientAlias = corePluginOpts.defaultEntryPaths.client;
-        }
-        let serverAlias;
-        if (serverEntryPath) {
-          serverAlias = vite.normalizePath(path.resolve(root, serverEntryPath));
-        } else {
-          serverAlias = corePluginOpts.defaultEntryPaths.server;
-        }
-        let startAlias;
-        if (startFilePath) {
-          startAlias = vite.normalizePath(path.resolve(root, startFilePath));
-        } else {
-          startAlias = corePluginOpts.defaultEntryPaths.start;
-        }
+        const clientAlias = vite.normalizePath(
+          clientEntryPath ?? corePluginOpts.defaultEntryPaths.client,
+        )
+        const serverAlias = vite.normalizePath(
+          serverEntryPath ?? corePluginOpts.defaultEntryPaths.server,
+        )
+        const startAlias = vite.normalizePath(
+          startFilePath ?? corePluginOpts.defaultEntryPaths.start,
+        )
+        const routerAlias = vite.normalizePath(routerFilePath)
         const entryAliasConfiguration = {
-          [ENTRY_POINTS.start]: startAlias,
-          [ENTRY_POINTS.router]: routerFilePath,
           [ENTRY_POINTS.client]: clientAlias,
-          [ENTRY_POINTS.server]: serverAlias
+          [ENTRY_POINTS.server]: serverAlias,
+          [ENTRY_POINTS.start]: startAlias,
+          [ENTRY_POINTS.router]: routerAlias,
         };
         const startPackageName = `@tanstack/${corePluginOpts.framework}-start`;
         const crawlFrameworkPkgsResult = await crawlFrameworkPkgs({
@@ -140,6 +130,9 @@ function TanStackStartVitePluginCore(corePluginOpts, startPluginOpts) {
                   }
                 },
                 outDir: getClientOutputDirectory(viteConfig)
+              },
+              optimizeDeps: {
+                entries: [clientAlias, routerAlias]
               }
             },
             [VITE_ENVIRONMENT_NAMES.server]: {
@@ -154,7 +147,10 @@ function TanStackStartVitePluginCore(corePluginOpts, startPluginOpts) {
                   include: [/node_modules/]
                 },
                 copyPublicDir: viteConfig.environments?.[VITE_ENVIRONMENT_NAMES.server]?.build?.copyPublicDir ?? false
-              }
+              },
+              optimizeDeps: {
+                entries: [serverAlias, startAlias, routerAlias],
+              },
             }
           },
           resolve: {
